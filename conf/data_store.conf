# @Bevywise.com IoT Initiative. All rights reserved 
# www.bevywise.com | Email - support@bevywise.com
#
# This file defines how the data is stored. 



#################################################################

[RELATIONAL_PERSISTENCE]

RELATIONAL_PERSISTENCE_ENABLED = TRUE
# TRUE || FALSE

[PAYLOAD_TO_DB]

PAYLOAD_TO_DB = ENABLED
# ENABLED || DISABLED

# If RELATIONAL_PERSISTENCE_ENABLED = TRUE and PAYLOAD_TO_DB = ENABLED, both: Device Information (DeviceIds, Subscriptions) and Payload (Published/Received messages) are stored in database.  

# If RELATIONAL_PERSISTENCE_ENABLED = FALSE, both: Device Information(DeviceIds, Subscriptions) and Payload (Published/Received messages) are NOT stored in database. MQTTRoute UI is NOT available in this case. PAYLOAD_TO_DB is assumed to be DISABLED.

# If RELATIONAL_PERSISTENCE_ENABLED = TRUE and PAYLOAD_TO_DB = DISABLED, Device Information(DeviceIds, Subscriptions) is stored in database and the only this information can be seen in the UI. MQTT Payloads are not stored in the database.


#################################################################

#################### DB Configurations ##########################

# If RELATIONAL_PERSISTENCE_ENABLED = TRUE, then the following configurations are used.

# Databases supported: MySQL, SQLite, MSSQL and PostgreSQL.

[CONFIG]

DB_SERVER = POSTGRES
# SQLITE || MYSQL || POSTGRES || MSSQL

# Configuration for each Database type follows.

#########################

[SQLITE]

SQLITE_DB = bevywise

# Set DB_SERVER = SQLITE
#########################

[MYSQL]

DBHOST = 127.0.0.1
DBPORT = 3306
MYSQL_DB = bevywise
MYSQL_USER = root
MYSQL_PASSWORD = root

# Set DB_SERVER = MYSQL
#########################

[MSSQL]

DRIVER = ODBC Driver 17 for SQL Server
SERVER_NAME = <Instance Name>
DBPORT = 1434
MSSQL_DB = bevywise
MSSQL_USER = sa
MSSQL_PASSWORD =  <MSSQL Server password> 

# Set DB_SERVER = MSSQL
#########################

[POSTGRES]

PSQLHOST = 127.0.0.1
PSQLPORT = 5432
PSQL_DB = laravel
PSQL_USER = sail
PSQL_PASSWORD = password

# Set DB_SERVER = POSTGRES
#################################################################


#################### Custom Storage ##########################

# If the MQTT Payload (messages) needs to be stored in Elasticsearch or sent/stored anywhere else, then this option is used.  Set CUSTOMSTORAGE = ENABLED
# This option is useful for Data Analytics. 

# To store MQTT Payload in Elasticsearch, set DATASTORE = ELASTIC and configure Elasticsearch Server. 

# To customise the storage of Payload, set DATASTORE = CUSTOM. In this case, the Payload is sent to a method named handle_Received_Payload(data) defined in a Python file whose path is set in INTERCEPT_FILEPATH. By default, this method defined in ./../extensions/custom_store.py is used. This method can be customised and the file path must be set in INTERCEPT_FILEPATH.
Method Prototype: def handle_Received_Payload(data)


[DATASTORE]

CUSTOMSTORAGE = DISABLED
# ENABLED || DISABLED

DATASTORE = CUSTOM
# ELASTIC || CUSTOM


[ELASTIC]

HOSTNAME = 127.0.0.1
PORT = 9200
INDEX_NAME = mqtt
BULK_INSERT_TIMING = 2


#################################################################
